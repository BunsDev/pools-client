/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestOracleWrapper,
  TestOracleWrapperInterface,
} from "../TestOracleWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "INITIAL_PRICE",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRICE_INCREMENT",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "incrementPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
    ],
    name: "setOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c6038038062000c608339818101604052810190620000379190620002c6565b6000620000496200010760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000f8816200010f60201b60201c565b600160028190555050620003b5565b600033905090565b6200011f6200010760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001456200028660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002399062000334565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620002c0816200039b565b92915050565b600060208284031215620002d957600080fd5b6000620002e984828501620002af565b91505092915050565b600062000301601a8362000356565b91507f4f7261636c652063616e6e6f74206265203020616464726573730000000000006000830152602082019050919050565b600060208201905081810360008301526200034f81620002f2565b9050919050565b600082825260208201905092915050565b600062000374826200037b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620003a68162000367565b8114620003b257600080fd5b50565b61089b80620003c56000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461012357806398d5fdca14610141578063a035b1fe1461015f578063b5bf6eb61461017d578063f2fde38b146101875761009e565b80636d25d802146100a3578063715018a6146100c15780637adbf973146100cb5780637c5e2795146100e75780637dc0d1d014610105575b600080fd5b6100ab6101a3565b6040516100b891906107a0565b60405180910390f35b6100c96101a8565b005b6100e560048036038101906100e091906106fe565b610315565b005b6100ef610478565b6040516100fc91906107a0565b60405180910390f35b61010d61047d565b60405161011a9190610785565b60405180910390f35b61012b6104a3565b6040516101389190610785565b60405180910390f35b6101496104cc565b60405161015691906107a0565b60405180910390f35b6101676104d6565b60405161017491906107a0565b60405180910390f35b6101856104dc565b005b6101a1600480360381019061019c91906106fe565b6104ef565b005b600181565b6101b06106e1565b73ffffffffffffffffffffffffffffffffffffffff166101ce6104a3565b73ffffffffffffffffffffffffffffffffffffffff1614610257576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61031d6106e1565b73ffffffffffffffffffffffffffffffffffffffff1661033b6104a3565b73ffffffffffffffffffffffffffffffffffffffff16146103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906107bb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600181565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600254905090565b60025481565b6001600260008282540192505081905550565b6104f76106e1565b73ffffffffffffffffffffffffffffffffffffffff166105156104a3565b73ffffffffffffffffffffffffffffffffffffffff161461059e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610624576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806108406026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000813590506106f881610828565b92915050565b60006020828403121561071057600080fd5b600061071e848285016106e9565b91505092915050565b610730816107ec565b82525050565b61073f816107fe565b82525050565b6000610752601a836107db565b91507f4f7261636c652063616e6e6f74206265203020616464726573730000000000006000830152602082019050919050565b600060208201905061079a6000830184610727565b92915050565b60006020820190506107b56000830184610736565b92915050565b600060208201905081810360008301526107d481610745565b9050919050565b600082825260208201905092915050565b60006107f782610808565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610831816107ec565b811461083c57600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220abb07cc41fa00580afd4575e250fb1cc6a123459b85fe5fb0b18a29537de500a64736f6c63430007060033";

export class TestOracleWrapper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestOracleWrapper> {
    return super.deploy(_oracle, overrides || {}) as Promise<TestOracleWrapper>;
  }
  getDeployTransaction(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_oracle, overrides || {});
  }
  attach(address: string): TestOracleWrapper {
    return super.attach(address) as TestOracleWrapper;
  }
  connect(signer: Signer): TestOracleWrapper__factory {
    return super.connect(signer) as TestOracleWrapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestOracleWrapperInterface {
    return new utils.Interface(_abi) as TestOracleWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestOracleWrapper {
    return new Contract(address, _abi, signerOrProvider) as TestOracleWrapper;
  }
}

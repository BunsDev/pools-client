/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  ILeveragedPool,
  ILeveragedPoolInterface,
} from "../ILeveragedPool";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "commitID",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "enum ILeveragedPool.CommitType",
        name: "commitType",
        type: "uint8",
      },
    ],
    name: "CreateCommit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint128",
        name: "commitID",
        type: "uint128",
      },
    ],
    name: "ExecuteCommit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "longToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "shortToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "poolCode",
        type: "string",
      },
    ],
    name: "PoolInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "startPrice",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "int256",
        name: "endPrice",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint112",
        name: "transferAmount",
        type: "uint112",
      },
    ],
    name: "PriceChange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "commitID",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "enum ILeveragedPool.CommitType",
        name: "commitType",
        type: "uint8",
      },
    ],
    name: "RemoveCommit",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum ILeveragedPool.CommitType",
        name: "commitType",
        type: "uint8",
      },
      {
        internalType: "uint112",
        name: "amount",
        type: "uint112",
      },
    ],
    name: "commit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128[]",
        name: "_commitIDs",
        type: "uint128[]",
      },
    ],
    name: "executeCommitment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "oldPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newPrice",
        type: "int256",
      },
    ],
    name: "executePriceChange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOraclePrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "_owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "_keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "_oracleWrapper",
            type: "address",
          },
          {
            internalType: "address",
            name: "_keeperOracle",
            type: "address",
          },
          {
            internalType: "address",
            name: "_longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "_shortToken",
            type: "address",
          },
          {
            internalType: "string",
            name: "_poolCode",
            type: "string",
          },
          {
            internalType: "uint32",
            name: "_frontRunningInterval",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "_updateInterval",
            type: "uint32",
          },
          {
            internalType: "bytes16",
            name: "_fee",
            type: "bytes16",
          },
          {
            internalType: "uint16",
            name: "_leverageAmount",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "_feeAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "_quoteToken",
            type: "address",
          },
        ],
        internalType: "struct ILeveragedPool.Initialization",
        name: "initialization",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "intervalPassed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "keeperOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracleWrapper",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_keeper",
        type: "address",
      },
    ],
    name: "setKeeper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    name: "transferGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "commitID",
        type: "uint128",
      },
    ],
    name: "uncommit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "updateFeeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateInterval",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ILeveragedPool__factory {
  static readonly abi = _abi;
  static createInterface(): ILeveragedPoolInterface {
    return new utils.Interface(_abi) as ILeveragedPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILeveragedPool {
    return new Contract(address, _abi, signerOrProvider) as ILeveragedPool;
  }
}

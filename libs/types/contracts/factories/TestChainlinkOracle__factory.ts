/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestChainlinkOracle,
  TestChainlinkOracleInterface,
} from "../TestChainlinkOracle";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526305f5e1006000556008600160006101000a81548160ff021916908360ff1602179055506040518060400160405280601e81526020017f41206d6f636b20436861696e6c696e6b2056332041676772656761746f720000815250600290805190602001906100739291906100b8565b50600380556001600460006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055503480156100b257600080fd5b50610163565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826100ee5760008555610135565b82601f1061010757805160ff1916838001178555610135565b82800160010185558215610135579182015b82811115610134578251825591602001919060010190610119565b5b5090506101429190610146565b5090565b5b8082111561015f576000816000905550600101610147565b5090565b61037f806101726000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a1395aa1161005b5780637a1395aa14610144578063a035b1fe14610175578063f7a3080614610193578063feaf968c146101c15761007d565b8063313ce5671461008257806354fd4d50146100a35780637284e416146100c1575b600080fd5b61008a610213565b604051808260ff16815260200191505060405180910390f35b6100ab610226565b6040518082815260200191505060405180910390f35b6100c961022c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101095780820151818401526020810190506100ee565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101736004803603602081101561015a57600080fd5b81019080803560ff1690602001909291905050506102ca565b005b61017d6102e8565b6040518082815260200191505060405180910390f35b6101bf600480360360208110156101a957600080fd5b81019080803590602001909291905050506102ee565b005b6101c96102f8565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b600160009054906101000a900460ff1681565b60035481565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102c25780601f10610297576101008083540402835291602001916102c2565b820191906000526020600020905b8154815290600101906020018083116102a557829003601f168201915b505050505081565b80600160006101000a81548160ff021916908360ff16021790555050565b60005481565b8060008190555050565b6000806000806000600460009054906101000a900469ffffffffffffffffffff169450600054935060009250429150600460009054906101000a900469ffffffffffffffffffff169050909192939456fea26469706673582212207e78a7e92217d5e5198cd2ee744117e95e0d25bdee6b05f2ae4c45ade928b99764736f6c63430007060033";

export class TestChainlinkOracle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestChainlinkOracle> {
    return super.deploy(overrides || {}) as Promise<TestChainlinkOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestChainlinkOracle {
    return super.attach(address) as TestChainlinkOracle;
  }
  connect(signer: Signer): TestChainlinkOracle__factory {
    return super.connect(signer) as TestChainlinkOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestChainlinkOracleInterface {
    return new utils.Interface(_abi) as TestChainlinkOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestChainlinkOracle {
    return new Contract(address, _abi, signerOrProvider) as TestChainlinkOracle;
  }
}

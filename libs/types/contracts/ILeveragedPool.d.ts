/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ILeveragedPoolInterface extends ethers.utils.Interface {
  functions: {
    "commit(uint8,uint112)": FunctionFragment;
    "executeCommitment(uint128[])": FunctionFragment;
    "executePriceChange(int256,int256)": FunctionFragment;
    "getOraclePrice()": FunctionFragment;
    "initialize(tuple)": FunctionFragment;
    "intervalPassed()": FunctionFragment;
    "keeperOracle()": FunctionFragment;
    "oracleWrapper()": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "transferGovernance(address)": FunctionFragment;
    "uncommit(uint128)": FunctionFragment;
    "updateFeeAddress(address)": FunctionFragment;
    "updateInterval()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCommitment",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executePriceChange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        _owner: string;
        _keeper: string;
        _oracleWrapper: string;
        _keeperOracle: string;
        _longToken: string;
        _shortToken: string;
        _poolCode: string;
        _frontRunningInterval: BigNumberish;
        _updateInterval: BigNumberish;
        _fee: BytesLike;
        _leverageAmount: BigNumberish;
        _feeAddress: string;
        _quoteToken: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "intervalPassed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keeperOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uncommit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterval",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePriceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intervalPassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uncommit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterval",
    data: BytesLike
  ): Result;

  events: {
    "CreateCommit(uint128,uint128,uint8)": EventFragment;
    "ExecuteCommit(uint128)": EventFragment;
    "PoolInitialized(address,address,address,string)": EventFragment;
    "PriceChange(int256,int256,uint112)": EventFragment;
    "RemoveCommit(uint128,uint128,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCommit"): EventFragment;
}

export class ILeveragedPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILeveragedPoolInterface;

  functions: {
    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeCommitment(
      _commitIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executePriceChange(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOraclePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      initialization: {
        _owner: string;
        _keeper: string;
        _oracleWrapper: string;
        _keeperOracle: string;
        _longToken: string;
        _shortToken: string;
        _poolCode: string;
        _frontRunningInterval: BigNumberish;
        _updateInterval: BigNumberish;
        _fee: BytesLike;
        _leverageAmount: BigNumberish;
        _feeAddress: string;
        _quoteToken: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intervalPassed(overrides?: CallOverrides): Promise<[boolean]>;

    keeperOracle(overrides?: CallOverrides): Promise<[string]>;

    oracleWrapper(overrides?: CallOverrides): Promise<[string]>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uncommit(
      commitID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeAddress(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateInterval(overrides?: CallOverrides): Promise<[number]>;
  };

  commit(
    commitType: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeCommitment(
    _commitIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executePriceChange(
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    initialization: {
      _owner: string;
      _keeper: string;
      _oracleWrapper: string;
      _keeperOracle: string;
      _longToken: string;
      _shortToken: string;
      _poolCode: string;
      _frontRunningInterval: BigNumberish;
      _updateInterval: BigNumberish;
      _fee: BytesLike;
      _leverageAmount: BigNumberish;
      _feeAddress: string;
      _quoteToken: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intervalPassed(overrides?: CallOverrides): Promise<boolean>;

  keeperOracle(overrides?: CallOverrides): Promise<string>;

  oracleWrapper(overrides?: CallOverrides): Promise<string>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uncommit(
    commitID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeAddress(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateInterval(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeCommitment(
      _commitIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    executePriceChange(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialization: {
        _owner: string;
        _keeper: string;
        _oracleWrapper: string;
        _keeperOracle: string;
        _longToken: string;
        _shortToken: string;
        _poolCode: string;
        _frontRunningInterval: BigNumberish;
        _updateInterval: BigNumberish;
        _fee: BytesLike;
        _leverageAmount: BigNumberish;
        _feeAddress: string;
        _quoteToken: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    intervalPassed(overrides?: CallOverrides): Promise<boolean>;

    keeperOracle(overrides?: CallOverrides): Promise<string>;

    oracleWrapper(overrides?: CallOverrides): Promise<string>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    transferGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uncommit(commitID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateFeeAddress(account: string, overrides?: CallOverrides): Promise<void>;

    updateInterval(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    CreateCommit(
      commitID?: BigNumberish | null,
      amount?: BigNumberish | null,
      commitType?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { commitID: BigNumber; amount: BigNumber; commitType: number }
    >;

    ExecuteCommit(
      commitID?: null
    ): TypedEventFilter<[BigNumber], { commitID: BigNumber }>;

    PoolInitialized(
      longToken?: string | null,
      shortToken?: string | null,
      quoteToken?: null,
      poolCode?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        longToken: string;
        shortToken: string;
        quoteToken: string;
        poolCode: string;
      }
    >;

    PriceChange(
      startPrice?: BigNumberish | null,
      endPrice?: BigNumberish | null,
      transferAmount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { startPrice: BigNumber; endPrice: BigNumber; transferAmount: BigNumber }
    >;

    RemoveCommit(
      commitID?: BigNumberish | null,
      amount?: BigNumberish | null,
      commitType?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { commitID: BigNumber; amount: BigNumber; commitType: number }
    >;
  };

  estimateGas: {
    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeCommitment(
      _commitIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executePriceChange(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialization: {
        _owner: string;
        _keeper: string;
        _oracleWrapper: string;
        _keeperOracle: string;
        _longToken: string;
        _shortToken: string;
        _poolCode: string;
        _frontRunningInterval: BigNumberish;
        _updateInterval: BigNumberish;
        _fee: BytesLike;
        _leverageAmount: BigNumberish;
        _feeAddress: string;
        _quoteToken: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intervalPassed(overrides?: CallOverrides): Promise<BigNumber>;

    keeperOracle(overrides?: CallOverrides): Promise<BigNumber>;

    oracleWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uncommit(
      commitID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeAddress(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateInterval(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeCommitment(
      _commitIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executePriceChange(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOraclePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initialization: {
        _owner: string;
        _keeper: string;
        _oracleWrapper: string;
        _keeperOracle: string;
        _longToken: string;
        _shortToken: string;
        _poolCode: string;
        _frontRunningInterval: BigNumberish;
        _updateInterval: BigNumberish;
        _fee: BytesLike;
        _leverageAmount: BigNumberish;
        _feeAddress: string;
        _quoteToken: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intervalPassed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeperOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uncommit(
      commitID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeAddress(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

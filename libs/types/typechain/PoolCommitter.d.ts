/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolCommitterInterface extends ethers.utils.Interface {
  functions: {
    "NO_COMMITS_REMAINING()": FunctionFragment;
    "commit(uint8,uint256)": FunctionFragment;
    "commitIDCounter()": FunctionFragment;
    "commitTypeToUint(uint8)": FunctionFragment;
    "commits(uint128)": FunctionFragment;
    "earliestCommitUnexecuted()": FunctionFragment;
    "executeAllCommitments()": FunctionFragment;
    "executeCommitment(tuple)": FunctionFragment;
    "factory()": FunctionFragment;
    "getCommit(uint128)": FunctionFragment;
    "latestCommitUnexecuted()": FunctionFragment;
    "leveragedPool()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setQuoteAndPool(address,address)": FunctionFragment;
    "shadowPools(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uncommit(uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NO_COMMITS_REMAINING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitIDCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitTypeToUint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earliestCommitUnexecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeAllCommitments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeCommitment",
    values: [
      {
        amount: BigNumberish;
        commitType: BigNumberish;
        created: BigNumberish;
        owner: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCommit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestCommitUnexecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leveragedPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setQuoteAndPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shadowPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uncommit",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "NO_COMMITS_REMAINING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitIDCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTypeToUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earliestCommitUnexecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAllCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCommit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestCommitUnexecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leveragedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuoteAndPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shadowPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uncommit", data: BytesLike): Result;

  events: {
    "CreateCommit(uint128,uint256,uint8)": EventFragment;
    "ExecuteCommit(uint128)": EventFragment;
    "FailedCommitExecution(uint128)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveCommit(uint128,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedCommitExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCommit"): EventFragment;
}

export class PoolCommitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolCommitterInterface;

  functions: {
    NO_COMMITS_REMAINING(overrides?: CallOverrides): Promise<[BigNumber]>;

    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitIDCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    commitTypeToUint(
      _commit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    commits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string] & {
        amount: BigNumber;
        commitType: number;
        created: number;
        owner: string;
      }
    >;

    earliestCommitUnexecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeAllCommitments(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeCommitment(
      _commit: {
        amount: BigNumberish;
        commitType: BigNumberish;
        created: BigNumberish;
        owner: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getCommit(
      _commitID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, number, string] & {
          amount: BigNumber;
          commitType: number;
          created: number;
          owner: string;
        }
      ]
    >;

    latestCommitUnexecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    leveragedPool(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQuoteAndPool(
      _quoteToken: string,
      _leveragedPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shadowPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uncommit(
      _commitID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NO_COMMITS_REMAINING(overrides?: CallOverrides): Promise<BigNumber>;

  commit(
    commitType: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitIDCounter(overrides?: CallOverrides): Promise<BigNumber>;

  commitTypeToUint(
    _commit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  commits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, string] & {
      amount: BigNumber;
      commitType: number;
      created: number;
      owner: string;
    }
  >;

  earliestCommitUnexecuted(overrides?: CallOverrides): Promise<BigNumber>;

  executeAllCommitments(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeCommitment(
    _commit: {
      amount: BigNumberish;
      commitType: BigNumberish;
      created: BigNumberish;
      owner: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getCommit(
    _commitID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, string] & {
      amount: BigNumber;
      commitType: number;
      created: number;
      owner: string;
    }
  >;

  latestCommitUnexecuted(overrides?: CallOverrides): Promise<BigNumber>;

  leveragedPool(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQuoteAndPool(
    _quoteToken: string,
    _leveragedPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shadowPools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uncommit(
    _commitID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NO_COMMITS_REMAINING(overrides?: CallOverrides): Promise<BigNumber>;

    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitIDCounter(overrides?: CallOverrides): Promise<BigNumber>;

    commitTypeToUint(
      _commit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string] & {
        amount: BigNumber;
        commitType: number;
        created: number;
        owner: string;
      }
    >;

    earliestCommitUnexecuted(overrides?: CallOverrides): Promise<BigNumber>;

    executeAllCommitments(overrides?: CallOverrides): Promise<void>;

    executeCommitment(
      _commit: {
        amount: BigNumberish;
        commitType: BigNumberish;
        created: BigNumberish;
        owner: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getCommit(
      _commitID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string] & {
        amount: BigNumber;
        commitType: number;
        created: number;
        owner: string;
      }
    >;

    latestCommitUnexecuted(overrides?: CallOverrides): Promise<BigNumber>;

    leveragedPool(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setQuoteAndPool(
      _quoteToken: string,
      _leveragedPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shadowPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uncommit(_commitID: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CreateCommit(
      commitID?: BigNumberish | null,
      amount?: BigNumberish | null,
      commitType?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { commitID: BigNumber; amount: BigNumber; commitType: number }
    >;

    ExecuteCommit(
      commitID?: null
    ): TypedEventFilter<[BigNumber], { commitID: BigNumber }>;

    FailedCommitExecution(
      commitID?: null
    ): TypedEventFilter<[BigNumber], { commitID: BigNumber }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RemoveCommit(
      commitID?: BigNumberish | null,
      amount?: BigNumberish | null,
      commitType?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { commitID: BigNumber; amount: BigNumber; commitType: number }
    >;
  };

  estimateGas: {
    NO_COMMITS_REMAINING(overrides?: CallOverrides): Promise<BigNumber>;

    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitIDCounter(overrides?: CallOverrides): Promise<BigNumber>;

    commitTypeToUint(
      _commit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    earliestCommitUnexecuted(overrides?: CallOverrides): Promise<BigNumber>;

    executeAllCommitments(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeCommitment(
      _commit: {
        amount: BigNumberish;
        commitType: BigNumberish;
        created: BigNumberish;
        owner: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getCommit(
      _commitID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestCommitUnexecuted(overrides?: CallOverrides): Promise<BigNumber>;

    leveragedPool(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQuoteAndPool(
      _quoteToken: string,
      _leveragedPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shadowPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uncommit(
      _commitID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NO_COMMITS_REMAINING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commit(
      commitType: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitIDCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitTypeToUint(
      _commit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earliestCommitUnexecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeAllCommitments(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeCommitment(
      _commit: {
        amount: BigNumberish;
        commitType: BigNumberish;
        created: BigNumberish;
        owner: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCommit(
      _commitID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestCommitUnexecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leveragedPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQuoteAndPool(
      _quoteToken: string,
      _leveragedPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shadowPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uncommit(
      _commitID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolSwapLibraryInterface extends ethers.utils.Interface {
  functions: {
    "calculatePriceChange(tuple)": FunctionFragment;
    "compareDecimals(bytes16,bytes16)": FunctionFragment;
    "convertDecimalToUInt(bytes16)": FunctionFragment;
    "convertUIntToDecimal(uint112)": FunctionFragment;
    "divInt(int256,int256)": FunctionFragment;
    "getAmountOut(bytes16,uint112)": FunctionFragment;
    "getLossAmount(bytes16,uint112)": FunctionFragment;
    "getLossMultiplier(bytes16,int8,bytes16)": FunctionFragment;
    "getMintAmount(uint256,uint112,uint112,uint112)": FunctionFragment;
    "getRatio(uint112,uint112)": FunctionFragment;
    "multiplyDecimalByUInt(bytes16,uint256)": FunctionFragment;
    "one()": FunctionFragment;
    "zero()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculatePriceChange",
    values: [
      {
        oldPrice: BigNumberish;
        newPrice: BigNumberish;
        longBalance: BigNumberish;
        shortBalance: BigNumberish;
        leverageAmount: BytesLike;
        fee: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "compareDecimals",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDecimalToUInt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertUIntToDecimal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divInt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLossAmount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLossMultiplier",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintAmount",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplyDecimalByUInt",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "one", values?: undefined): string;
  encodeFunctionData(functionFragment: "zero", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "calculatePriceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDecimalToUInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertUIntToDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "divInt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLossAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLossMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiplyDecimalByUInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "one", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zero", data: BytesLike): Result;

  events: {};
}

export class PoolSwapLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolSwapLibraryInterface;

  functions: {
    calculatePriceChange(
      priceChange: {
        oldPrice: BigNumberish;
        newPrice: BigNumberish;
        longBalance: BigNumberish;
        shortBalance: BigNumberish;
        leverageAmount: BytesLike;
        fee: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        newLongBalance: BigNumber;
        newShortBalance: BigNumber;
        totalFeeAmount: BigNumber;
      }
    >;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAmountOut(
      ratio: BytesLike,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      inverseShadowbalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    one(overrides?: CallOverrides): Promise<[string]>;

    zero(overrides?: CallOverrides): Promise<[string]>;
  };

  calculatePriceChange(
    priceChange: {
      oldPrice: BigNumberish;
      newPrice: BigNumberish;
      longBalance: BigNumberish;
      shortBalance: BigNumberish;
      leverageAmount: BytesLike;
      fee: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      newLongBalance: BigNumber;
      newShortBalance: BigNumber;
      totalFeeAmount: BigNumber;
    }
  >;

  compareDecimals(
    x: BytesLike,
    y: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  convertDecimalToUInt(
    ratio: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertUIntToDecimal(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  divInt(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAmountOut(
    ratio: BytesLike,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLossAmount(
    lossMultiplier: BytesLike,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLossMultiplier(
    ratio: BytesLike,
    direction: BigNumberish,
    leverage: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getMintAmount(
    tokenSupply: BigNumberish,
    amountIn: BigNumberish,
    balance: BigNumberish,
    inverseShadowbalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRatio(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  multiplyDecimalByUInt(
    a: BytesLike,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  one(overrides?: CallOverrides): Promise<string>;

  zero(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    calculatePriceChange(
      priceChange: {
        oldPrice: BigNumberish;
        newPrice: BigNumberish;
        longBalance: BigNumberish;
        shortBalance: BigNumberish;
        leverageAmount: BytesLike;
        fee: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        newLongBalance: BigNumber;
        newShortBalance: BigNumber;
        totalFeeAmount: BigNumber;
      }
    >;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAmountOut(
      ratio: BytesLike,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      inverseShadowbalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    one(overrides?: CallOverrides): Promise<string>;

    zero(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    calculatePriceChange(
      priceChange: {
        oldPrice: BigNumberish;
        newPrice: BigNumberish;
        longBalance: BigNumberish;
        shortBalance: BigNumberish;
        leverageAmount: BytesLike;
        fee: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      ratio: BytesLike,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      inverseShadowbalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    one(overrides?: CallOverrides): Promise<BigNumber>;

    zero(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePriceChange(
      priceChange: {
        oldPrice: BigNumberish;
        newPrice: BigNumberish;
        longBalance: BigNumberish;
        shortBalance: BigNumberish;
        leverageAmount: BytesLike;
        fee: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      ratio: BytesLike,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      inverseShadowbalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    one(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zero(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestToken, TestTokenInterface } from "../TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "newDecimals",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526012600560006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162001e2b38038062001e2b8339818101604052810190620000539190620001bf565b818181600390805190602001906200006d92919062000091565b5080600490805190602001906200008692919062000091565b5050505050620003c8565b8280546200009f90620002d9565b90600052602060002090601f016020900481019282620000c357600085556200010f565b82601f10620000de57805160ff19168380011785556200010f565b828001600101855582156200010f579182015b828111156200010e578251825591602001919060010190620000f1565b5b5090506200011e919062000122565b5090565b5b808211156200013d57600081600090555060010162000123565b5090565b60006200015862000152846200026d565b62000244565b905082815260208101848484011115620001775762000176620003a8565b5b62000184848285620002a3565b509392505050565b600082601f830112620001a457620001a3620003a3565b5b8151620001b684826020860162000141565b91505092915050565b60008060408385031215620001d957620001d8620003b2565b5b600083015167ffffffffffffffff811115620001fa57620001f9620003ad565b5b62000208858286016200018c565b925050602083015167ffffffffffffffff8111156200022c576200022b620003ad565b5b6200023a858286016200018c565b9150509250929050565b60006200025062000263565b90506200025e82826200030f565b919050565b6000604051905090565b600067ffffffffffffffff8211156200028b576200028a62000374565b5b6200029682620003b7565b9050602081019050919050565b60005b83811015620002c3578082015181840152602081019050620002a6565b83811115620002d3576000848401525b50505050565b60006002820490506001821680620002f257607f821691505b6020821081141562000309576200030862000345565b5b50919050565b6200031a82620003b7565b810181811067ffffffffffffffff821117156200033c576200033b62000374565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b611a5380620003d86000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637a1395aa1161008c578063a457c2d711610066578063a457c2d714610273578063a9059cbb146102a3578063dd62ed3e146102d3578063fcd3533c14610303576100ea565b80637a1395aa1461020957806394bf804d1461022557806395d89b4114610255576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806370a08231146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f7610333565b604051610104919061137c565b60405180910390f35b610127600480360381019061012291906110f0565b6103c5565b6040516101349190611361565b60405180910390f35b6101456103e3565b60405161015291906114de565b60405180910390f35b6101756004803603810190610170919061109d565b6103ed565b6040516101829190611361565b60405180910390f35b6101936104e5565b6040516101a091906114f9565b60405180910390f35b6101c360048036038101906101be91906110f0565b6104fc565b6040516101d09190611361565b60405180910390f35b6101f360048036038101906101ee9190611030565b6105a8565b60405161020091906114de565b60405180910390f35b610223600480360381019061021e9190611170565b6105f0565b005b61023f600480360381019061023a9190611130565b61060e565b60405161024c9190611361565b60405180910390f35b61025d610624565b60405161026a919061137c565b60405180910390f35b61028d600480360381019061028891906110f0565b6106b6565b60405161029a9190611361565b60405180910390f35b6102bd60048036038101906102b891906110f0565b6107a1565b6040516102ca9190611361565b60405180910390f35b6102ed60048036038101906102e8919061105d565b6107bf565b6040516102fa91906114de565b60405180910390f35b61031d60048036038101906103189190611130565b610846565b60405161032a9190611361565b60405180910390f35b60606003805461034290611642565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90611642565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b5050505050905090565b60006103d96103d261085c565b8484610864565b6001905092915050565b6000600254905090565b60006103fa848484610a2f565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061044561085c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc9061141e565b60405180910390fd5b6104d9856104d161085c565b858403610864565b60019150509392505050565b6000600560009054906101000a900460ff16905090565b600061059e61050961085c565b84846001600061051761085c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105999190611530565b610864565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600560006101000a81548160ff021916908360ff16021790555050565b600061061a8284610cb0565b6001905092915050565b60606004805461063390611642565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90611642565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b5050505050905090565b600080600160006106c561085c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610782576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107799061149e565b60405180910390fd5b61079661078d61085c565b85858403610864565b600191505092915050565b60006107b56107ae61085c565b8484610a2f565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006108528284610e10565b6001905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb9061147e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610944576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093b906113de565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a2291906114de565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a969061145e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061139e565b60405180910390fd5b610b1a838383610fe7565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b97906113fe565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c339190611530565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9791906114de565b60405180910390a3610caa848484610fec565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d17906114be565b60405180910390fd5b610d2c60008383610fe7565b8060026000828254610d3e9190611530565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d939190611530565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610df891906114de565b60405180910390a3610e0c60008383610fec565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e779061143e565b60405180910390fd5b610e8c82600083610fe7565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f09906113be565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610f699190611586565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610fce91906114de565b60405180910390a3610fe283600084610fec565b505050565b505050565b505050565b600081359050611000816119d8565b92915050565b600081359050611015816119ef565b92915050565b60008135905061102a81611a06565b92915050565b600060208284031215611046576110456116d2565b5b600061105484828501610ff1565b91505092915050565b60008060408385031215611074576110736116d2565b5b600061108285828601610ff1565b925050602061109385828601610ff1565b9150509250929050565b6000806000606084860312156110b6576110b56116d2565b5b60006110c486828701610ff1565b93505060206110d586828701610ff1565b92505060406110e686828701611006565b9150509250925092565b60008060408385031215611107576111066116d2565b5b600061111585828601610ff1565b925050602061112685828601611006565b9150509250929050565b60008060408385031215611147576111466116d2565b5b600061115585828601611006565b925050602061116685828601610ff1565b9150509250929050565b600060208284031215611186576111856116d2565b5b60006111948482850161101b565b91505092915050565b6111a6816115cc565b82525050565b60006111b782611514565b6111c1818561151f565b93506111d181856020860161160f565b6111da816116d7565b840191505092915050565b60006111f260238361151f565b91506111fd826116e8565b604082019050919050565b600061121560228361151f565b915061122082611737565b604082019050919050565b600061123860228361151f565b915061124382611786565b604082019050919050565b600061125b60268361151f565b9150611266826117d5565b604082019050919050565b600061127e60288361151f565b915061128982611824565b604082019050919050565b60006112a160218361151f565b91506112ac82611873565b604082019050919050565b60006112c460258361151f565b91506112cf826118c2565b604082019050919050565b60006112e760248361151f565b91506112f282611911565b604082019050919050565b600061130a60258361151f565b915061131582611960565b604082019050919050565b600061132d601f8361151f565b9150611338826119af565b602082019050919050565b61134c816115f8565b82525050565b61135b81611602565b82525050565b6000602082019050611376600083018461119d565b92915050565b6000602082019050818103600083015261139681846111ac565b905092915050565b600060208201905081810360008301526113b7816111e5565b9050919050565b600060208201905081810360008301526113d781611208565b9050919050565b600060208201905081810360008301526113f78161122b565b9050919050565b600060208201905081810360008301526114178161124e565b9050919050565b6000602082019050818103600083015261143781611271565b9050919050565b6000602082019050818103600083015261145781611294565b9050919050565b60006020820190508181036000830152611477816112b7565b9050919050565b60006020820190508181036000830152611497816112da565b9050919050565b600060208201905081810360008301526114b7816112fd565b9050919050565b600060208201905081810360008301526114d781611320565b9050919050565b60006020820190506114f36000830184611343565b92915050565b600060208201905061150e6000830184611352565b92915050565b600081519050919050565b600082825260208201905092915050565b600061153b826115f8565b9150611546836115f8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561157b5761157a611674565b5b828201905092915050565b6000611591826115f8565b915061159c836115f8565b9250828210156115af576115ae611674565b5b828203905092915050565b60006115c5826115d8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561162d578082015181840152602081019050611612565b8381111561163c576000848401525b50505050565b6000600282049050600182168061165a57607f821691505b6020821081141561166e5761166d6116a3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6119e1816115ba565b81146119ec57600080fd5b50565b6119f8816115f8565b8114611a0357600080fd5b50565b611a0f81611602565b8114611a1a57600080fd5b5056fea2646970667358221220b5f10b78edc292645ef927e843b41e16ca361c84dcb1f9a63998608929650b3864736f6c63430008060033";

export class TestToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestToken> {
    return super.deploy(name, symbol, overrides || {}) as Promise<TestToken>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
